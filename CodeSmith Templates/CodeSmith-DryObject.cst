<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="false" Description="Generates a very simple business object." Src="CodeSmith-DryObject-BaseTemplate.cst.cs" Inherits="TemplateBase"%>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="ClassNamespace" Type="System.String" Category="Options" Default="BusinessObjects" Description="Namespace your class is in. Only used if SingleFileMode is true!" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Map Name="DbDataReader" Src="DbType-DataReaderMethod" Description="DbType to DataReader Method Map" %>
<%@ Map Name="SqlNativeSqlDb" Src="SqlNativeType-SqlDbType" Description="SqlNativeType to SqlDbType Map" %>
<%@ Map Name="DbTypeCSharp" Src="DbType-CSharp" Description="DbType to CSharp Map" %>

<%@ Property Name="DBType" Type="DBTypeOption" Category="Options" Default="1" Description="Type of RDBMS to generate for" %>
<script runat="template">

    public String className;

     public override List<PropertyDefinition> PrivateSetterProperties{
        get{
            //return SourceTable.PrimaryKey.MemberColumns.Select(
            //    c => new PropertyDefinition(){Name=GetPropertyName(c), Type=GetCSharpVariableType(c)}).ToList();
            var originalList=base.PrivateSetterProperties;
            originalList.Add(new PropertyDefinition(){Name="OId", Type="Int64"});
            return originalList;
            
        }
    }
    public override List<ColumnSchema> InsertableColumns
    {
        get
        {
            var originalList=base.InsertableColumns;
            originalList.RemoveAll(c => c.Name=="OId");
            return originalList;
        }
    }    
    public override List<PropertyDefinition> RegularProperties
    {
        get
        {
            var originalList=base.RegularProperties;
            originalList.RemoveAll(p => p.Name=="ClientOId");
            return originalList;
        }
    }

     
 
    protected override void OnInit()
    {
        base.OnInit();
        DbTypeMapCSharp = DbTypeCSharp;
	}
    protected override void OnPreRender()
    {

        className = GetPascalCaseName(SourceTable.Name);
    }
            
    public override string GetFileName() 
    {
        return GetPascalCaseName(SourceTable.Name) + ".cs";
    }  
    
    
//    public string GetCSharpVariableType(ColumnSchema column) {
//        return base.GetCSharpVariableType(DbTypeCSharp, column);
//    }
    
</script>
using Principle4.DryLogic;
namespace <%=ClassNamespace%>
{
    public abstract class LogicClassBase<T>
    {
        protected ObjectInstance OI {get; private set;}
        
        protected LogicClassBase(ObjectDefinition<T> od)
        {
            oi=OD.CreateInstance(this);
        }

        public void EnsureValid(){
            List<RuleViolation> ruleViolations;
            if (OI.Validate(out ruleViolations) == false)
            {
                throw new Core.BusinessRuleException(ruleViolations[0].ErrorMessage);
            }
        }
    }
}

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using <%=ClassNamespace%>.Core;
using App = <%=ClassNamespace%>.Core.App;
using Principle4.DryLogic;
using Principle4.DryLogic.Validation;
using Dapper;
using SafeDapper;
using System.Transactions;

<% 
var className = GetPascalCaseName(SourceTable.Name); 
var npkCols = this.SourceTable.NonPrimaryKeyColumns;
%>

namespace <%=ClassNamespace%>
{
    [DryLogicObject]
    public class <%=className  %> : LogicClassBase<<%= className %>>
	{

        static ObjectDefinition<<%= className %>> OD = new ObjectDefinition<<%= className %>>();
            
		public <%= className %>() : base(OD)
		{
		}
        
        
        <%foreach(var kp in this.PrivateSetterProperties){%>
        public <%= $"{kp.Type} {kp.Name}" %>{get; internal set;}
        <%} %>
		
        <% foreach(var prop in RegularProperties) { %>
        #region <%= prop.Name %>
        public static readonly PropertyDefinition<<%= prop.Type %>> <%= prop.Name %>Property
          = OD.AddProperty(pi => pi.<%=prop.Name%>, p =>
          {
            Assert.That(p)
              <% if(prop.IsRequired){ %>.IsRequired() <%} %>
              .IsConvertable()
              ;
          });

        public <%= prop.Type %> <%= prop.Name %>
        {
          get { return OI.GetValue(<%= prop.Name %>Property); }
          set { OI.SetValue(<%= prop.Name %>Property, value); }
        }
        #endregion
		<% } %>



        /// <summary>
        /// Saves a new <%= className %> instance to the database and updates the <paramref name="OId"/> property with the saved instance's id.
        /// </summary>
        /// <param name="data"><%= className %> instance to add</param>
        /// <returns>The original <%= className %></returns>
		public static <%= className %> Add(<%= className %> data)
		{
            using(var transaction = App.DataAccess.GetTransactionScope())
            {
                data.EnsureValid();
                AddInternal(data);
                transaction.Complete();
                return data;
            }
        }
		internal static <%= className %> AddInternal(<%= className %> data)
		{
            #region cmd - insert into <%= SourceTable.Name %>...
            String sql = @"
declare @oId bigint
exec Object_AddByName '<%= SourceTable.Name %>', @clientOId, @modifiedByOId, @oId output

insert into <%= SourceTable.Name %>(
    OId, <% foreach(var colName in InsertableColumns.Select(c => c.Name).WithTrailingComma()){%>
    <%= colName %><% } %>
)<%= DBType==DBTypeOption.SqlServer? "output inserted.OId" : "" %>
values(
    @oId, <% foreach(var colParam in InsertableColumns.Select( c=> PP + c.Name ).WithTrailingComma()){%>
    <%= colParam %><% } %>
)  <%= DBType==DBTypeOption.Oracle? "returning id into :id" : "" %>
";
            #endregion

            #region Parameters
            var p = new DynamicParameters(new {
                modifiedByOId = App.SecurityContext.User.OId,
                
            <% foreach(var param in InsertableColumns.Select(c => $"{c.Name} = data.{GetPropertyName(c)}{(IsOracleBool(c)?" ?1:0":"")}").WithTrailingComma()){%>
                <%= param %>
            <%}%> 
            });
            <%if(DBType == DBTypeOption.Oracle){%>
                p.Add("id", dbType:DbType.<%=GetPrimaryKeyType(SourceTable)%>, direction: ParameterDirection.Output);
            <%} %>
            #endregion
            
            using(var conn = App.DataAccess.GetConnection())
            {
                data.OId = conn.Query<<%= GetPrimaryKeyType(SourceTable) %>>(sql, param:p).Single();
            }
            return data;
		}
        
        /// <summary>
        /// Updates an existing <%= className %> instance to the database.
        /// </summary>
        /// <param name="data"><%= className %> instance to update</param>
        /// <returns>The original <%= className %></returns>
		public static <%= className %> Update(<%= className %> data)
		{
            using(var transaction = App.DataAccess.GetTransactionScope())
            {
                data.EnsureValid();
                UpdateInternal(data);
                transaction.Complete();
                return data;
            }
        }
		internal static <%= className %> UpdateInternal(<%= className %> data)
		{
            #region cmd - update <%= SourceTable.Name %>...
            String sql =@"
exec Object_AuditEdit @oId, @clientOId, @modifiedByOId

update <%= SourceTable.Name %> set <% foreach(var colUpdate in NonKeyColumns.Select(c => $"{c.Name}={PP}{c.Name}").WithTrailingComma()){%>
    <%= colUpdate %><%}%> 
output <%= PP + SourceTable.PrimaryKey.MemberColumns[0].Name %> as <%= SourceTable.PrimaryKey.MemberColumns[0].Name %>
from <%= SourceTable.Name %>
Where <% foreach(var clause in PrimaryKeyColumns.Select(c => $"{c.Name}={PP}{c.Name}").WithLeading("and ")){%>
    <%= clause %><%}%> 
";    
            #endregion

            #region Parameters
            var p = new DynamicParameters(new {
                modifiedByOId = App.SecurityContext.User.OId,
                
                OId = data.OId,
            <% foreach(var param in InsertableColumns.Select(c => $"{c.Name} = data.{GetPropertyName(c)} {(IsOracleBool(c)?"?1:0":"")}").WithTrailingComma()){%>
                <%= param %>
            <%}%> 
            });
            <%if(DBType == DBTypeOption.Oracle){%>
                p.Add("id", dbType:DbType.<%=GetPrimaryKeyType(SourceTable)%>, direction: ParameterDirection.Output);
            <%} %>
            #endregion
           
            using(var conn = App.DataAccess.GetConnection())
            {
                data.OId = conn.Query<<%= GetPrimaryKeyType(SourceTable) %>>(sql, param:p).SingleOrNotFound();
            }
            return data;
		}
        /// <summary>
        /// Deletes an existing <%= className %> instance from the database.
        /// </summary>
        /// <param name="oId">Identifier for the<%= className %> instance to delete</param>
		public static void Delete(Int64 oId)
		{
            using (var transaction = App.DataAccess.GetTransactionScope())
            {
                DeleteInternal(oId);
                transaction.Complete();
            }
        }
		internal static void DeleteInternal(Int64 oId)
		{
            #region cmd - update <%= SourceTable.Name %>...
            String sql =@"
exec Object_AuditDelete @oId, @clientOId, @modifiedByOId

Delete
from <%= SourceTable.Name %>
output <%= PP + SourceTable.PrimaryKey.MemberColumns[0].Name %> as <%= SourceTable.PrimaryKey.MemberColumns[0].Name %>
Where <% foreach(var clause in PrimaryKeyColumns.Select(c => $"{c.Name}={PP}{c.Name}").WithLeading("and ")){%>
    <%= clause %><%}%> 
";    
            #endregion

            #region Parameters
            var p = new DynamicParameters(new {
                modifiedByOId = App.SecurityContext.User.OId,
                
                OId = oId,
                ClientOId = App.SecurityContext.ClientOId
            });
            #endregion
           
            using(var conn = App.DataAccess.GetConnection())
            {
                var oId = conn.Query<<%= GetPrimaryKeyType(SourceTable) %>>(sql, param:p).SingleOrNotFound();
            }
		}
         
        
        
        /// <summary>
        /// Retrieves a <%= className %> instance
        /// </summary>
        /// <param name="id">Id of the <%= className %> to retrieve</param>
        /// <returns>The <%= className %> with the given id.</returns>
        public static <%= className %> Get(<%= GetPrimaryKeyType(SourceTable) %> oId)
        {
            #region sql - select * from <%= SourceTable.Name %>...
            String sql = 
@"select 
<%--Select Columns--%>
    OId,<% foreach(var colName in InsertableColumns.Select(c => c.Name).WithTrailingComma()){%>
    <%= colName %><% } %>
from <%= SourceTable.Name %>
Where <% foreach(var clause in PrimaryKeyColumns.Select(c => $"{c.Name}={PP}{c.Name}").WithLeading("and ")){%>
    <%= clause %><%}%> 
";     
            #endregion
            #region Parameters
            var p = new DynamicParameters(new {
<%--            <% foreach(var param in PrimaryKeyColumns.Select(c => $"{c.Name} = data.{GetPropertyName(c)} {(IsOracleBool(c)?"?1:0":"")}").WithTrailingComma()){%>
                <%= param %>
            <%}%> --%>        
                OId = oId,
                ClientOId = App.SecurityContext.ClientOId
            });
            <%if(DBType == DBTypeOption.Oracle){%>
                p.Add("id", dbType:DbType.<%=GetPrimaryKeyType(SourceTable)%>, direction: ParameterDirection.Output);
            <%} %>
            #endregion
            
      
            using(var conn = App.DataAccess.GetConnection())
            {
                return conn.SafeQuery<<%= className %>>(sql, param:p).Single();
            }
    	}
    }
}

